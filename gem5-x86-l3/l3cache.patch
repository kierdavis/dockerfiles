diff --git a/configs/common/CacheConfig.py b/configs/common/CacheConfig.py
index a0a18a3aa..58bbca277 100644
--- a/configs/common/CacheConfig.py
+++ b/configs/common/CacheConfig.py
@@ -70,6 +70,8 @@ def config_cache(options, system):
         if buildEnv['TARGET_ISA'] == 'x86':
             walk_cache_class = PageTableWalkerCache
 
+    l3_cache_class = L3Cache
+
     # Set the cache line size of the system
     system.cache_line_size = options.cacheline_size
 
@@ -90,7 +92,17 @@ def config_cache(options, system):
 
         system.tol2bus = L2XBar(clk_domain = system.cpu_clk_domain)
         system.l2.cpu_side = system.tol2bus.master
-        system.l2.mem_side = system.membus.slave
+
+        if options.l3cache:
+            system.l3 = l3_cache_class(clk_domain=system.cpu_clk_domain,
+                                       size=options.l3_size,
+                                       assoc=options.l3_assoc)
+            system.tol3bus = L3XBar(clk_domain = system.cpu_clk_domain)
+            system.l2.mem_side = system.tol3bus.slave
+            system.l3.cpu_side = system.tol3bus.master
+            system.l3.mem_side = system.membus.slave
+        else:
+            system.l2.mem_side = system.membus.slave
 
     if options.memchecker:
         system.memchecker = MemChecker()
diff --git a/configs/common/Caches.py b/configs/common/Caches.py
index 926a41d07..beeafc8af 100644
--- a/configs/common/Caches.py
+++ b/configs/common/Caches.py
@@ -72,6 +72,15 @@ class L2Cache(Cache):
     tgts_per_mshr = 12
     write_buffers = 8
 
+class L3Cache(Cache):
+    assoc = 64
+    tag_latency = 32
+    data_latency = 32
+    response_latency = 32
+    mshrs = 32
+    tgts_per_mshr = 24
+    write_buffers = 16
+
 class IOCache(Cache):
     assoc = 8
     tag_latency = 50
diff --git a/configs/common/Options.py b/configs/common/Options.py
index 29ef74c9a..7abfb8f01 100644
--- a/configs/common/Options.py
+++ b/configs/common/Options.py
@@ -98,6 +98,7 @@ def addNoISAOptions(parser):
                       help="use external port for SystemC TLM cosimulation")
     parser.add_option("--caches", action="store_true")
     parser.add_option("--l2cache", action="store_true")
+    parser.add_option("--l3cache", action="store_true")
     parser.add_option("--num-dirs", type="int", default=1)
     parser.add_option("--num-l2caches", type="int", default=1)
     parser.add_option("--num-l3caches", type="int", default=1)
diff --git a/src/cpu/BaseCPU.py b/src/cpu/BaseCPU.py
index 096aa635e..86d356644 100644
--- a/src/cpu/BaseCPU.py
+++ b/src/cpu/BaseCPU.py
@@ -50,7 +50,7 @@ from m5.params import *
 from m5.proxy import *
 from m5.util.fdthelper import *
 
-from XBar import L2XBar
+from XBar import L2XBar, L3XBar
 from InstTracer import InstTracer
 from CPUTracers import ExeTracer
 from MemObject import MemObject
@@ -312,6 +312,14 @@ class BaseCPU(MemObject):
         self.toL2Bus.master = self.l2cache.cpu_side
         self._cached_ports = ['l2cache.mem_side']
 
+    def addThreeLevelCacheHierarchy(self, ic, dc, l2c, iwc = None, dwc = None):
+        self.addPrivateSplitL2Caches(ic, dc, iwc, dwc)
+        self.toL3Bus = L3XBar()
+        self.connectCachedPorts(self.toL3Bus)
+        self.l3cache = l3c
+        self.toL3Bus.master = self.l3cache.cpu_side
+        self._cached_ports = ['l3cache.mem_side']
+
     def createThreads(self):
         # If no ISAs have been created, assume that the user wants the
         # default ISA.
diff --git a/src/mem/XBar.py b/src/mem/XBar.py
index 655d9808a..f6553694c 100644
--- a/src/mem/XBar.py
+++ b/src/mem/XBar.py
@@ -148,6 +148,15 @@ class L2XBar(CoherentXBar):
     # to the first level of unified cache.
     point_of_unification = True
 
+class L3XBar(CoherentXBar):
+    # 256-bit crossbar by default
+    width = 32
+    frontend_latency = 1
+    forward_latency = 0
+    response_latency = 1
+    snoop_response_latency = 1
+    snoop_filter = SnoopFilter(lookup_latency = 0)
+
 # One of the key coherent crossbar instances is the system
 # interconnect, tying together the CPU clusters, GPUs, and any I/O
 # coherent masters, and DRAM controllers.
